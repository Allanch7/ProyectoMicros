00100011101111011111111111111000
00100000101010001111111111111111
10101111101010000000000000000000
10101111101111110000000000000100
00010100000001010000000000000011
00000000000000000001000000100000
00100011101111010000000000001000
00000011111000000000000000001000
00000000000010000010100000100000
00001100000000000000000000000000
10001111101010000000000000000000
00000000000010000100100010000000
00000001001001000100100000100000
10001101001010100000000000000000
00000000010010100001000000100000
10001111101111110000000000000100
00100011101111010000000000001000
00000011111000000000000000001000

___________________________________________________________________________________________
sum:
 addi $sp, $sp, -8      # Ajustar sp
 addi $t0, $a1, -1      # Computar size - 1
 sw $t0, 0($sp)         # Salvar size - 1 al stack
 sw $ra, 4($sp)         # Salvar el return address
 bne $a1, $zero, ELSE   # branch ! ( size == 0 )
 add $v0, $zero, $zero  # Valor de retorno == 0
 addi $sp, $sp, 8       # Ajustar sp
 jr $ra 		# Regresar      
ELSE:                   
 add $a1, $zero, $t0    # actualizar segundo argumento
 jal sum                
 lw $t0, 0($sp)         # Restaurar size - 1 de stack
 sll $t1, $t0, 2        # Multiplicar size - 1 por 4
 add $t1, $t1, $a0      # Computar & arr[ size - 1 ] (direcci√≥n de arr[size -1] )
 lw $t2, 0($t1)         # t2 = arr[ size - 1 ]
 add $v0, $v0, $t2      # retval = $v0 + arr[size - 1]
 lw $ra, 4($sp)         # restore return address from stack
 addi $sp, $sp, 8       # Adjust sp
 jr $ra 		# Return




